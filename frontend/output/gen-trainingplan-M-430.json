import React,
{ useState
} from 'react';
import { ThemeProvider
} from '@mui/material/styles';
import { Container, Button, Grid
} from '@mui/material'; // Removed Box from import
import { LocalizationProvider
} from '@mui/x-date-pickers';
import { AdapterDateFns
} from '@mui/x-date-pickers/AdapterDateFns';
import theme from './theme';
import YogaFlowModal from './YogaFlowModal';
import LongRunModal from './LongRunModal';
import yogaFlows from './data/yogaFlows.json';
import trainingAdvice from './data/trainingAdvice.json';
import { handleGeneratePlan
} from './handleGeneratePlan';
import Header from './components/Header';
import TrainingPlanForm from './components/TrainingPlanForm';
import TrainingPlan from './components/TrainingPlan';
import { phaseMapping
} from './phaseMapping'; // Import phaseMapping
import './App.css';
import { exportICS
} from './exportICS';

function App() {
  const [fitnessLevel, setFitnessLevel
  ] = useState('beginner');
  const [targetTime, setTargetTime
  ] = useState('5: 00');
  const [trainingDays, setTrainingDays
  ] = useState([
    2,
    4,
    5,
    7
  ]);
  const [startDate, setStartDate
  ] = useState(new Date());
  const [plan, setPlan
  ] = useState(null);
  const [modalOpen, setModalOpen
  ] = useState(false);
  const [selectedYogaFlow, setSelectedYogaFlow
  ] = useState(null);
  const [longRunModalOpen, setLongRunModalOpen
  ] = useState(false);
  const [longRunAdvice, setLongRunAdvice
  ] = useState(null);
  const [generalTip, setGeneralTip
  ] = useState('');
  const [fileName, setFileName
  ] = useState('');
  const [anchorEl, setAnchorEl
  ] = useState(null);

  const handleFileUpload = (event) => {
    const file = event.target.files[
      0
    ];
    setFileName(file.name);
    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target.result;
      console.log('File content:', content);
      try {
        const json = JSON.parse(content);
        console.log('Parsed JSON:', json);
        if (validateTrainingPlan(json)) {
          setPlan(json);
          console.log('Training plan set successfully');
        } else {
          console.error('Invalid training plan structure');
        }
      } catch (error) {
        console.error('Invalid JSON file:', error);
      }
    };
    reader.readAsText(file);
  };

  const validateTrainingPlan = (plan) => {
    const phases = ['BASE', 'BUILD', 'PEAK', 'TAPER', 'RACE'
    ];
    const isValid = phases.every(phase => plan[phase
    ] && plan[phase
    ].length > 0);
    if (!isValid) {
      console.error('Validation failed for training plan:', plan);
    }
    return isValid;
  };

  const handleCardClick = (day, phase) => {
    if (day.title === 'Yoga') {
      const randomFlow = yogaFlows.yoga_flows[Math.floor(Math.random() * yogaFlows.yoga_flows.length)
      ];
      setSelectedYogaFlow(randomFlow);
      setModalOpen(true);
    } else if (day.title === 'Long Run') {
      const mappedPhase = phaseMapping[phase
      ];
      const adviceData = trainingAdvice.trainingAdvice[targetTime
      ];
      if (adviceData && adviceData[mappedPhase
      ]) {
        const advice = adviceData[mappedPhase
        ].advice;
        const randomTip = trainingAdvice.generalTips[Math.floor(Math.random() * trainingAdvice.generalTips.length)
        ];
        setLongRunAdvice(advice);
        setGeneralTip(randomTip);
        setLongRunModalOpen(true);
      } else {
        console.error('Invalid target time or phase:', targetTime, phase);
      }
    }
  };

  const handleCloseYogaModal = () => {
    setModalOpen(false);
    setSelectedYogaFlow(null);
  };

  const handleCloseLongRunModal = () => {
    setLongRunModalOpen(false);
    setLongRunAdvice(null);
    setGeneralTip('');
  };

  const handleMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleExportClick = () => {
    if (plan) {
      console.log('Exporting plan to ICS:', plan);
      exportICS(startDate, fitnessLevel, targetTime, plan);
    }
    handleMenuClose();
  };

  const handleGeneratePlanClick = () => {
    handleGeneratePlan(targetTime, fitnessLevel, trainingDays, setPlan);
  };

  return (
    <ThemeProvider theme={theme
  }>
      <LocalizationProvider dateAdapter={AdapterDateFns
  }>
        <Container>
          <Header
            anchorEl={anchorEl
  }
            handleMenuClick={handleMenuClick
  }
            handleMenuClose={handleMenuClose
  }
            handleFileUpload={handleFileUpload
  }
            handleExportClick={handleExportClick
  }
            plan={plan
  }
            fileName={fileName
  }
          />
          <TrainingPlanForm
            fitnessLevel={fitnessLevel
  }
            setFitnessLevel={setFitnessLevel
  }
            targetTime={targetTime
  }
            setTargetTime={setTargetTime
  }
            trainingDays={trainingDays
  }
            setTrainingDays={setTrainingDays
  }
            startDate={startDate
  }
            setStartDate={setStartDate
  }
          />
          <Grid item xs={
    12
  } style={
    { marginTop: '16px'
    }
  }>
            <Button variant="contained" color="primary" onClick={handleGeneratePlanClick
  } style={
    { boxShadow: '0 4px 8px 0 rgba(0,
      0,
      0,
      0.2),
      0 6px 20px 0 rgba(0,
      0,
      0,
      0.19)'
    }
  }>
              Generate Plan
            </Button>
            <Button variant="outlined" color="secondary" onClick={handleExportClick
  } style={
    { marginLeft: '20px', borderColor: '#ff69b4', color: '#ff69b4', boxShadow: '0 4px 8px 0 rgba(0,
      0,
      0,
      0.2),
      0 6px 20px 0 rgba(0,
      0,
      0,
      0.19)'
    }
  }>
              Export to Calendar
            </Button>
          </Grid>
          {plan && <TrainingPlan plan={plan
    } handleCardClick={handleCardClick
    } />
  }
          <YogaFlowModal open={modalOpen
  } handleClose={handleCloseYogaModal
  } yogaFlow={selectedYogaFlow
  } />
          <LongRunModal open={longRunModalOpen
  } handleClose={handleCloseLongRunModal
  } advice={longRunAdvice
  } generalTip={generalTip
  } />
        </Container>
      </LocalizationProvider>
    </ThemeProvider>
  );
}

export default App;